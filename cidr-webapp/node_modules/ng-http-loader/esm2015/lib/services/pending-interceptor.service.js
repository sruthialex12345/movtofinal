/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ReplaySubject, throwError } from 'rxjs';
import { catchError, finalize, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class PendingInterceptorService {
    constructor() {
        this._pendingRequests = 0;
        this._pendingRequestsStatus = new ReplaySubject(1);
        this._filteredUrlPatterns = [];
        this._filteredMethods = [];
        this._filteredHeaders = [];
    }
    /**
     * @return {?}
     */
    get pendingRequestsStatus$() {
        return this._pendingRequestsStatus.asObservable();
    }
    /**
     * @return {?}
     */
    get pendingRequests() {
        return this._pendingRequests;
    }
    /**
     * @return {?}
     */
    get filteredUrlPatterns() {
        return this._filteredUrlPatterns;
    }
    /**
     * @param {?} httpMethods
     * @return {?}
     */
    set filteredMethods(httpMethods) {
        this._filteredMethods = httpMethods;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set filteredHeaders(value) {
        this._filteredHeaders = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set forceByPass(value) {
        this._forceByPass = value;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    shouldBypassUrl(url) {
        return this._filteredUrlPatterns.some(e => {
            return e.test(url);
        });
    }
    /**
     * @param {?} req
     * @return {?}
     */
    shouldBypassMethod(req) {
        return this._filteredMethods.some(e => {
            return e.toUpperCase() === req.method.toUpperCase();
        });
    }
    /**
     * @param {?} req
     * @return {?}
     */
    shouldBypassHeader(req) {
        return this._filteredHeaders.some(e => {
            return req.headers.has(e);
        });
    }
    /**
     * @param {?} req
     * @return {?}
     */
    shouldBypass(req) {
        return this.shouldBypassUrl(req.urlWithParams)
            || this.shouldBypassMethod(req)
            || this.shouldBypassHeader(req)
            || this._forceByPass;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        /** @type {?} */
        const shouldBypass = this.shouldBypass(req);
        if (!shouldBypass) {
            this._pendingRequests++;
            if (1 === this._pendingRequests) {
                this._pendingRequestsStatus.next(true);
            }
        }
        return next.handle(req).pipe(map(event => {
            return event;
        }), catchError(error => {
            return throwError(error);
        }), finalize(() => {
            if (!shouldBypass) {
                this._pendingRequests--;
                if (0 === this._pendingRequests) {
                    this._pendingRequestsStatus.next(false);
                }
            }
        }));
    }
}
PendingInterceptorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ PendingInterceptorService.ngInjectableDef = i0.defineInjectable({ factory: function PendingInterceptorService_Factory() { return new PendingInterceptorService(); }, token: PendingInterceptorService, providedIn: "root" });
if (false) {
    /** @type {?} */
    PendingInterceptorService.prototype._pendingRequests;
    /** @type {?} */
    PendingInterceptorService.prototype._pendingRequestsStatus;
    /** @type {?} */
    PendingInterceptorService.prototype._filteredUrlPatterns;
    /** @type {?} */
    PendingInterceptorService.prototype._filteredMethods;
    /** @type {?} */
    PendingInterceptorService.prototype._filteredHeaders;
    /** @type {?} */
    PendingInterceptorService.prototype._forceByPass;
}
/** @type {?} */
export const PendingInterceptorServiceInterceptor = [{
        provide: HTTP_INTERCEPTORS,
        useExisting: PendingInterceptorService,
        multi: true
    }];
//# sourceMappingURL=data:application/json;base64,