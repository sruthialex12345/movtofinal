/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ReplaySubject, throwError } from 'rxjs';
import { catchError, finalize, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
var PendingInterceptorService = /** @class */ (function () {
    function PendingInterceptorService() {
        this._pendingRequests = 0;
        this._pendingRequestsStatus = new ReplaySubject(1);
        this._filteredUrlPatterns = [];
        this._filteredMethods = [];
        this._filteredHeaders = [];
    }
    Object.defineProperty(PendingInterceptorService.prototype, "pendingRequestsStatus$", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pendingRequestsStatus.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "pendingRequests", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pendingRequests;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "filteredUrlPatterns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filteredUrlPatterns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "filteredMethods", {
        set: /**
         * @param {?} httpMethods
         * @return {?}
         */
        function (httpMethods) {
            this._filteredMethods = httpMethods;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "filteredHeaders", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filteredHeaders = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "forceByPass", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._forceByPass = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @return {?}
     */
    PendingInterceptorService.prototype.shouldBypassUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this._filteredUrlPatterns.some(function (e) {
            return e.test(url);
        });
    };
    /**
     * @param {?} req
     * @return {?}
     */
    PendingInterceptorService.prototype.shouldBypassMethod = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this._filteredMethods.some(function (e) {
            return e.toUpperCase() === req.method.toUpperCase();
        });
    };
    /**
     * @param {?} req
     * @return {?}
     */
    PendingInterceptorService.prototype.shouldBypassHeader = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this._filteredHeaders.some(function (e) {
            return req.headers.has(e);
        });
    };
    /**
     * @param {?} req
     * @return {?}
     */
    PendingInterceptorService.prototype.shouldBypass = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this.shouldBypassUrl(req.urlWithParams)
            || this.shouldBypassMethod(req)
            || this.shouldBypassHeader(req)
            || this._forceByPass;
    };
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    PendingInterceptorService.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        /** @type {?} */
        var shouldBypass = this.shouldBypass(req);
        if (!shouldBypass) {
            this._pendingRequests++;
            if (1 === this._pendingRequests) {
                this._pendingRequestsStatus.next(true);
            }
        }
        return next.handle(req).pipe(map(function (event) {
            return event;
        }), catchError(function (error) {
            return throwError(error);
        }), finalize(function () {
            if (!shouldBypass) {
                _this._pendingRequests--;
                if (0 === _this._pendingRequests) {
                    _this._pendingRequestsStatus.next(false);
                }
            }
        }));
    };
    PendingInterceptorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ PendingInterceptorService.ngInjectableDef = i0.defineInjectable({ factory: function PendingInterceptorService_Factory() { return new PendingInterceptorService(); }, token: PendingInterceptorService, providedIn: "root" });
    return PendingInterceptorService;
}());
export { PendingInterceptorService };
if (false) {
    /** @type {?} */
    PendingInterceptorService.prototype._pendingRequests;
    /** @type {?} */
    PendingInterceptorService.prototype._pendingRequestsStatus;
    /** @type {?} */
    PendingInterceptorService.prototype._filteredUrlPatterns;
    /** @type {?} */
    PendingInterceptorService.prototype._filteredMethods;
    /** @type {?} */
    PendingInterceptorService.prototype._filteredHeaders;
    /** @type {?} */
    PendingInterceptorService.prototype._forceByPass;
}
/** @type {?} */
export var PendingInterceptorServiceInterceptor = [{
        provide: HTTP_INTERCEPTORS,
        useExisting: PendingInterceptorService,
        multi: true
    }];
//# sourceMappingURL=data:application/json;base64,